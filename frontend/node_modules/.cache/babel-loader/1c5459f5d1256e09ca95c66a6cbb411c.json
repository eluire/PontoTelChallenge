{"ast":null,"code":"var _jsxFileName = \"/home/mateusesb/Desktop/Ponto_tel_challenge_2/frontend/ponto_challenge/src/Components/ConsultaPersonalizada/ConsultaPersonalizada.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Main from \"../../Templates/Main/Main\";\nimport \"./ConsultaPersonalizada.css\";\n\nconst ConsultaPersonalizada = () => {\n  const [state_price, setStatePrice] = useState([]);\n  const [state_no_Price, setStateNoPrice] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [submit, setSubmit] = useState(false);\n  const [_delete, setDelete] = useState(false);\n  const [refresh, setRefresh] = useState(false);\n  var selectedCheckboxes = new Set();\n  const [lista_emp_disponiveis, set_lista_emp_disponiveis] = useState([{\n    nome: \"Vale\",\n    cod_empresa: \"VALE3.SA\",\n    on: false\n  }, {\n    nome: \"Itaú\",\n    cod_empresa: \"ITUB4.SA\",\n    on: false\n  }, {\n    nome: \"Ambev\",\n    cod_empresa: \"ABEV3.SA\",\n    on: false\n  }, {\n    nome: \"Petrobras\",\n    cod_empresa: \"PETR4.SA\",\n    on: false\n  }, {\n    nome: \"Bradesco\",\n    cod_empresa: \"BBDC4.SA\",\n    on: false\n  }]); // { nome: \"Santander\", cod_empresa: \"BCSA34.SA\" },\n  // { nome: \"Telefonica\", cod_empresa: \"VIVT4.SA\" },\n  // { nome: \"Banco do Brasil\", cod_empresa: \"BBAS3.SA\" },\n  // { nome: \"Itausa\", cod_empresa: \"ITSA4.SA\" },\n  // { nome: \"Weg\", cod_empresa: \"WEGE3.SA\" },\n  // const checkEl = useRef(null);\n\n  useEffect(() => {\n    if (isEmpty(state_price)) {\n      getEmpresasDb();\n    }\n  }, []);\n  useEffect(() => {\n    console.log(state_no_Price);\n  }, [state_no_Price]);\n  useEffect(() => {\n    console.log(lista_emp_disponiveis);\n  }, [lista_emp_disponiveis]);\n  useEffect(() => {\n    if (!isEmpty(state_no_Price)) {\n      pushEmpresasDb();\n    }\n  }, [submit]);\n  useEffect(() => {\n    if (!isEmpty(state_no_Price)) {\n      deleteEmpresasDb();\n    }\n  }, [_delete]);\n  useEffect(() => {\n    if (refresh && !isEmpty(state_no_Price)) {\n      getEmpresasDb();\n    }\n  }, [refresh]); //FUNÇÃO AUXILIAR ---> COLOCAR EM OUTRO ARQUIVO\n\n  function isEmpty(obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) return false;\n    }\n\n    return true;\n  }\n\n  function isin(chave, obj) {\n    obj.map(key => key === chave ? true : false);\n  }\n\n  async function getEmpresasDb() {\n    if (!refresh) {\n      try {\n        resp = await axios.get(\"http://127.0.0.1:5001/export-personalizada\");\n        resp.data.map(empresa => {\n          setStatePrice(prevstate => [...prevstate, {\n            nome: empresa[\"empresa\"],\n            cod_empresa: empresa[\"cod_empresa\"],\n            preco: empresa[\"price\"]\n          }]);\n        });\n      } catch {\n        console.log(\"erro na api\");\n        setStatePrice([{\n          nome: \"try again\",\n          preco: \"\"\n        }]);\n      }\n    } else {\n      try {\n        const resp = await axios.get(\"http://127.0.0.1:5001/export-personalizada\");\n        console.log(resp.data);\n        resp.data.map(empresa => {\n          if (isin(empresa[\"cod_empresa\"], state_price)) {\n            console.log(empresa[\"cod_empresa\"]);\n            setStatePrice(prevstate => [...prevstate, {\n              nome: empresa[\"empresa\"],\n              cod_empresa: empresa[\"cod_empresa\"],\n              preco: empresa[\"price\"]\n            }]);\n          }\n        });\n        setStateNoPrice([]);\n        setSubmit(!submit);\n        setDelete(!_delete);\n        setRefresh(!refresh);\n      } catch {\n        console.log(\"erro, tela não atualizada\");\n      }\n    }\n  } // setStatePrice([]);\n  // async function refreshEmpresasDb() {\n  //   try {\n  //     const resp = await axios.get(\n  //       \"http://127.0.0.1:5001/export-personalizada\"\n  //     );\n  //     console.log(resp.data);\n  //     resp.data.map((empresa) => {\n  //       if (isin(empresa[\"cod_empresa\"], state_price)) {\n  //         console.log(empresa[\"cod_empresa\"]);\n  //         setStatePrice((prevstate) => [\n  //           ...prevstate,\n  //           {\n  //             nome: empresa[\"empresa\"],\n  //             cod_empresa: empresa[\"cod_empresa\"],\n  //             preco: empresa[\"price\"],\n  //           },\n  //         ]);\n  //       }\n  //     });\n  //     setStateNoPrice([]);\n  //     setSubmit(!submit);\n  //     setDelete(!_delete);\n  //     setRefresh(!refresh);\n  //   } catch {\n  //     console.log(\"erro, tela não atualizada\");\n  //   }\n  // }\n\n\n  async function pushEmpresasDb() {\n    try {\n      console.log(\"save\");\n      console.log(state_no_Price);\n      const resp = await axios.post(\"http://127.0.0.1:5001/save-personalizada\", state_no_Price);\n      alert(resp.data);\n      setRefresh(!refresh);\n    } catch {\n      alert(\"Empresa não cadastrada\");\n    }\n  }\n\n  async function deleteEmpresasDb() {\n    try {\n      console.log(state_no_Price);\n      const resp = await axios.delete(\"http://127.0.0.1:5001/delete-personalizada\", {\n        data: state_no_Price\n      });\n      alert(resp.data);\n      setRefresh(!refresh);\n    } catch {\n      alert(\"Empresa não deletada\");\n    }\n  }\n\n  const handleButtonSave = () => {\n    Array.isArray(lista_emp_disponiveis) && lista_emp_disponiveis.map(emp => {\n      if (selectedCheckboxes.has(emp[\"cod_empresa\"])) {\n        setStateNoPrice(prevstate => [...prevstate, {\n          empresa: emp[\"nome\"],\n          cod_empresa: emp[\"cod_empresa\"]\n        }]);\n        set_lista_emp_disponiveis(emp[{\n          on: true\n        }]);\n      }\n    });\n    setSubmit(!submit);\n  };\n\n  const handleButtonDelete = () => {\n    Array.isArray(lista_emp_disponiveis) && lista_emp_disponiveis.map(emp => {\n      if (selectedCheckboxes.has(emp[\"cod_empresa\"])) {\n        setStateNoPrice(prevstate => [...prevstate, {\n          empresa: emp[\"nome\"],\n          cod_empresa: emp[\"cod_empresa\"]\n        }]);\n        set_lista_emp_disponiveis(emp[{\n          on: false\n        }]);\n      }\n    });\n    setDelete(!_delete);\n  };\n\n  const handleInputCheck = e => {\n    const cod = e.target.getAttribute(\"cod\");\n\n    if (selectedCheckboxes.has(cod)) {\n      selectedCheckboxes.delete(cod);\n    } else {\n      selectedCheckboxes.add(cod);\n    }\n  };\n\n  const createCheckBox = () => {\n    return Array.isArray(lista_emp_disponiveis) && lista_emp_disponiveis.map(empresa => /*#__PURE__*/React.createElement(\"div\", {\n      key: empresa.nome,\n      className: \"form-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-check-input\",\n      type: \"checkbox\",\n      cod: empresa.cod_empresa,\n      nome: empresa.nome,\n      onClick: handleInputCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 49\n      }\n    }, empresa.nome)));\n  };\n\n  function renderToggle() {\n    if (toggle) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 47\n        }\n      }, createCheckBox(), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-default\",\n        type: \"submit\",\n        onClick: handleButtonSave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 49\n        }\n      }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-default\",\n        type: \"submit\",\n        onClick: handleButtonDelete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 49\n        }\n      }, \"Delete\")));\n    } else return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setToggle(!toggle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 43\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-list\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 45\n    }\n  })), renderToggle(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 43\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empresas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 45\n    }\n  }, state_price.map(empresa => /*#__PURE__*/React.createElement(\"button\", {\n    key: empresa.nome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 49\n    }\n  }, empresa.nome, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 51\n    }\n  }), empresa.preco)))));\n};\n\nexport default ConsultaPersonalizada;","map":{"version":3,"sources":["/home/mateusesb/Desktop/Ponto_tel_challenge_2/frontend/ponto_challenge/src/Components/ConsultaPersonalizada/ConsultaPersonalizada.js"],"names":["React","useState","useEffect","axios","Main","ConsultaPersonalizada","state_price","setStatePrice","state_no_Price","setStateNoPrice","toggle","setToggle","submit","setSubmit","_delete","setDelete","refresh","setRefresh","selectedCheckboxes","Set","lista_emp_disponiveis","set_lista_emp_disponiveis","nome","cod_empresa","on","isEmpty","getEmpresasDb","console","log","pushEmpresasDb","deleteEmpresasDb","obj","key","hasOwnProperty","isin","chave","map","resp","get","data","empresa","prevstate","preco","post","alert","delete","handleButtonSave","Array","isArray","emp","has","handleButtonDelete","handleInputCheck","e","cod","target","getAttribute","add","createCheckBox","renderToggle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Main from \"../../Templates/Main/Main\";\nimport \"./ConsultaPersonalizada.css\";\n\nconst ConsultaPersonalizada = () => {\n                                      const [\n                                        state_price,\n                                        setStatePrice,\n                                      ] = useState([]);\n                                      const [\n                                        state_no_Price,\n                                        setStateNoPrice,\n                                      ] = useState([]);\n                                      const [toggle, setToggle] = useState(\n                                        false\n                                      );\n                                      const [submit, setSubmit] = useState(\n                                        false\n                                      );\n                                      const [_delete, setDelete] = useState(\n                                        false\n                                      );\n                                      const [refresh, setRefresh] = useState(\n                                        false\n                                      );\n                                      var selectedCheckboxes = new Set();\n                                      const [\n                                        lista_emp_disponiveis,\n                                        set_lista_emp_disponiveis,\n                                      ] = useState([\n                                        {\n                                          nome: \"Vale\",\n                                          cod_empresa: \"VALE3.SA\",\n                                          on: false,\n                                        },\n                                        {\n                                          nome: \"Itaú\",\n                                          cod_empresa: \"ITUB4.SA\",\n                                          on: false,\n                                        },\n                                        {\n                                          nome: \"Ambev\",\n                                          cod_empresa: \"ABEV3.SA\",\n                                          on: false,\n                                        },\n                                        {\n                                          nome: \"Petrobras\",\n                                          cod_empresa: \"PETR4.SA\",\n                                          on: false,\n                                        },\n                                        {\n                                          nome: \"Bradesco\",\n                                          cod_empresa: \"BBDC4.SA\",\n                                          on: false,\n                                        },\n                                      ]);\n                                      // { nome: \"Santander\", cod_empresa: \"BCSA34.SA\" },\n                                      // { nome: \"Telefonica\", cod_empresa: \"VIVT4.SA\" },\n                                      // { nome: \"Banco do Brasil\", cod_empresa: \"BBAS3.SA\" },\n                                      // { nome: \"Itausa\", cod_empresa: \"ITSA4.SA\" },\n                                      // { nome: \"Weg\", cod_empresa: \"WEGE3.SA\" },\n                                      // const checkEl = useRef(null);\n\n                                      useEffect(() => {\n                                        if (isEmpty(state_price)) {\n                                          getEmpresasDb();\n                                        }\n                                      }, []);\n\n                                      useEffect(() => {\n                                        console.log(state_no_Price);\n                                      }, [state_no_Price]);\n\n                                      useEffect(() => {\n                                        console.log(lista_emp_disponiveis);\n                                      }, [lista_emp_disponiveis]);\n\n                                      useEffect(() => {\n                                        if (!isEmpty(state_no_Price)) {\n                                          pushEmpresasDb();\n                                        }\n                                      }, [submit]);\n\n                                      useEffect(() => {\n                                        if (!isEmpty(state_no_Price)) {\n                                          deleteEmpresasDb();\n                                        }\n                                      }, [_delete]);\n\n                                      useEffect(() => {\n                                        if (\n                                          refresh &&\n                                          !isEmpty(state_no_Price)\n                                        ) {\n                                          getEmpresasDb();\n                                        }\n                                      }, [refresh]);\n\n                                      //FUNÇÃO AUXILIAR ---> COLOCAR EM OUTRO ARQUIVO\n                                      function isEmpty(obj) {\n                                        for (var key in obj) {\n                                          if (obj.hasOwnProperty(key))\n                                            return false;\n                                        }\n                                        return true;\n                                      }\n\n                                      function isin(chave, obj) {\n                                        obj.map((key) =>\n                                          key === chave ? true : false\n                                        );\n                                      }\n\n                                      async function getEmpresasDb() {\n                                        if (!refresh) {\n                                          try {\n                                            resp = await axios.get(\n                                              \"http://127.0.0.1:5001/export-personalizada\"\n                                            );\n                                            resp.data.map((empresa) => {\n                                              setStatePrice((prevstate) => [\n                                                ...prevstate,\n                                                {\n                                                  nome: empresa[\"empresa\"],\n                                                  cod_empresa:\n                                                    empresa[\"cod_empresa\"],\n                                                  preco: empresa[\"price\"],\n                                                },\n                                              ]);\n                                            });\n                                          } catch {\n                                            console.log(\"erro na api\");\n                                            setStatePrice([\n                                              { nome: \"try again\", preco: \"\" },\n                                            ]);\n                                          }\n                                        } else {\n                                          try {\n                                            const resp = await axios.get(\n                                              \"http://127.0.0.1:5001/export-personalizada\"\n                                            );\n                                            console.log(resp.data);\n                                            resp.data.map((empresa) => {\n                                              if (\n                                                isin(\n                                                  empresa[\"cod_empresa\"],\n                                                  state_price\n                                                )\n                                              ) {\n                                                console.log(\n                                                  empresa[\"cod_empresa\"]\n                                                );\n                                                setStatePrice((prevstate) => [\n                                                  ...prevstate,\n                                                  {\n                                                    nome: empresa[\"empresa\"],\n                                                    cod_empresa:\n                                                      empresa[\"cod_empresa\"],\n                                                    preco: empresa[\"price\"],\n                                                  },\n                                                ]);\n                                              }\n                                            });\n                                            setStateNoPrice([]);\n                                            setSubmit(!submit);\n                                            setDelete(!_delete);\n                                            setRefresh(!refresh);\n                                          } catch {\n                                            console.log(\n                                              \"erro, tela não atualizada\"\n                                            );\n                                          }\n                                        }\n                                      }\n                                      // setStatePrice([]);\n\n                                      // async function refreshEmpresasDb() {\n                                      //   try {\n                                      //     const resp = await axios.get(\n                                      //       \"http://127.0.0.1:5001/export-personalizada\"\n                                      //     );\n                                      //     console.log(resp.data);\n                                      //     resp.data.map((empresa) => {\n                                      //       if (isin(empresa[\"cod_empresa\"], state_price)) {\n                                      //         console.log(empresa[\"cod_empresa\"]);\n                                      //         setStatePrice((prevstate) => [\n                                      //           ...prevstate,\n                                      //           {\n                                      //             nome: empresa[\"empresa\"],\n                                      //             cod_empresa: empresa[\"cod_empresa\"],\n                                      //             preco: empresa[\"price\"],\n                                      //           },\n                                      //         ]);\n                                      //       }\n                                      //     });\n                                      //     setStateNoPrice([]);\n                                      //     setSubmit(!submit);\n                                      //     setDelete(!_delete);\n                                      //     setRefresh(!refresh);\n                                      //   } catch {\n                                      //     console.log(\"erro, tela não atualizada\");\n                                      //   }\n                                      // }\n\n                                      async function pushEmpresasDb() {\n                                        try {\n                                          console.log(\"save\");\n                                          console.log(state_no_Price);\n                                          const resp = await axios.post(\n                                            \"http://127.0.0.1:5001/save-personalizada\",\n                                            state_no_Price\n                                          );\n                                          alert(resp.data);\n                                          setRefresh(!refresh);\n                                        } catch {\n                                          alert(\"Empresa não cadastrada\");\n                                        }\n                                      }\n\n                                      async function deleteEmpresasDb() {\n                                        try {\n                                          console.log(state_no_Price);\n                                          const resp = await axios.delete(\n                                            \"http://127.0.0.1:5001/delete-personalizada\",\n                                            { data: state_no_Price }\n                                          );\n                                          alert(resp.data);\n                                          setRefresh(!refresh);\n                                        } catch {\n                                          alert(\"Empresa não deletada\");\n                                        }\n                                      }\n                                      const handleButtonSave = () => {\n                                        Array.isArray(lista_emp_disponiveis) &&\n                                          lista_emp_disponiveis.map((emp) => {\n                                            if (\n                                              selectedCheckboxes.has(\n                                                emp[\"cod_empresa\"]\n                                              )\n                                            ) {\n                                              setStateNoPrice((prevstate) => [\n                                                ...prevstate,\n                                                {\n                                                  empresa: emp[\"nome\"],\n                                                  cod_empresa:\n                                                    emp[\"cod_empresa\"],\n                                                },\n                                              ]);\n\n                                              set_lista_emp_disponiveis(\n                                                emp[{ on: true }]\n                                              );\n                                            }\n                                          });\n                                        setSubmit(!submit);\n                                      };\n\n                                      const handleButtonDelete = () => {\n                                        Array.isArray(lista_emp_disponiveis) &&\n                                          lista_emp_disponiveis.map((emp) => {\n                                            if (\n                                              selectedCheckboxes.has(\n                                                emp[\"cod_empresa\"]\n                                              )\n                                            ) {\n                                              setStateNoPrice((prevstate) => [\n                                                ...prevstate,\n                                                {\n                                                  empresa: emp[\"nome\"],\n                                                  cod_empresa:\n                                                    emp[\"cod_empresa\"],\n                                                },\n                                              ]);\n\n                                              set_lista_emp_disponiveis(\n                                                emp[{ on: false }]\n                                              );\n                                            }\n                                          });\n                                        setDelete(!_delete);\n                                      };\n\n                                      const handleInputCheck = (e) => {\n                                        const cod = e.target.getAttribute(\n                                          \"cod\"\n                                        );\n\n                                        if (selectedCheckboxes.has(cod)) {\n                                          selectedCheckboxes.delete(cod);\n                                        } else {\n                                          selectedCheckboxes.add(cod);\n                                        }\n                                      };\n\n                                      const createCheckBox = () => {\n                                        return (\n                                          Array.isArray(\n                                            lista_emp_disponiveis\n                                          ) &&\n                                          lista_emp_disponiveis.map(\n                                            (empresa) => (\n                                              <div\n                                                key={empresa.nome}\n                                                className=\"form-check\"\n                                              >\n                                                <input\n                                                  className=\"form-check-input\"\n                                                  type=\"checkbox\"\n                                                  cod={empresa.cod_empresa}\n                                                  nome={empresa.nome}\n                                                  onClick={handleInputCheck}\n                                                />\n                                                <label className=\"form-check-label\">\n                                                  {empresa.nome}\n                                                </label>\n                                              </div>\n                                            )\n                                          )\n                                        );\n                                      };\n\n                                      function renderToggle() {\n                                        if (toggle) {\n                                          return (\n                                            <div className=\"options\">\n                                              <form>\n                                                {createCheckBox()}\n                                                <button\n                                                  className=\"btn btn-default\"\n                                                  type=\"submit\"\n                                                  onClick={handleButtonSave}\n                                                >\n                                                  Save\n                                                </button>\n                                                <button\n                                                  className=\"btn btn-default\"\n                                                  type=\"submit\"\n                                                  onClick={handleButtonDelete}\n                                                >\n                                                  Delete\n                                                </button>\n                                              </form>\n                                            </div>\n                                          );\n                                        } else return null;\n                                      }\n\n                                      return (\n                                        <Main>\n                                          <button\n                                            onClick={() => setToggle(!toggle)}\n                                          >\n                                            <i\n                                              className=\"fa fa-list\"\n                                              aria-hidden=\"true\"\n                                            ></i>\n                                          </button>\n                                          {renderToggle()}\n                                          <div className=\"dashboard\">\n                                            <div className=\"empresas\">\n                                              {state_price.map((empresa) => (\n                                                <button key={empresa.nome}>\n                                                  {empresa.nome}\n                                                  <br />\n                                                  {empresa.preco}\n                                                </button>\n                                              ))}\n                                            </div>\n                                          </div>\n                                        </Main>\n                                      );\n                                    };\n\nexport default ConsultaPersonalizada;\n"]},"metadata":{},"sourceType":"module"}